package umbc.cmsc447scheduler.solver;
 
import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;
import org.optaplanner.core.api.score.buildin.bendable.BendableScoreHolder;
import umbc.cmsc447scheduler.domain.Course;
import umbc.cmsc447scheduler.domain.Room;
import umbc.cmsc447scheduler.domain.RoomSchedule;
//global BendableScoreHolder scoreHolder;
 
global HardSoftScoreHolder scoreHolder;

rule "fitcapacity"
	when
		$course : Course(room != null, capacity > getRoom().getCapacity())
	then
    	scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "uniqueclass"
	when
		Course($leftId : id,  $subject : subject, $course_num : course_num, $title : coursetitle, $section : section)
        Course(id > $leftId, subject == $subject, course_num == $course_num, coursetitle == $title, section == $section)
	then
    	scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "conficttime"
	when
		Course($leftId : id, $leftRoom : room, $day : day, $time : time)
        Course(room == $leftRoom, day.get(0) == $day.get(0), time == $time, id != $leftId)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -10);
end


rule "similarcapacity"
	when
		$course : Course(room != null, capacity < getRoom().getCapacity())
	then
    	scoreHolder.addSoftConstraintMatch(kcontext, $course.getCapacity() - $course.getRoom().getCapacity());
end

/*
rule "roomCapacity"
when
    $room : Room($capacity : capacity)
    accumulate(
        Course(
            room == $room,
            $amount : amount);
        $amountTotal : sum($amount);
        $amountTotal > $capacity
        )
then
    scoreHolder.addHardConstraintMatch(kcontext, $capacity - $amountTotal);
end

 
 
rule "machineCost_used"
when
    $machine : Machine($cost : cost)
    exists Task(machine == $machine)
then
    scoreHolder.addSoftConstraintMatch(kcontext, -$cost);            
end
*/